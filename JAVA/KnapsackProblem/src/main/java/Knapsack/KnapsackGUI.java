package Knapsack;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;

public class KnapsackGUI {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Knapsack Problem");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1000, 600);
        frame.setLayout(new BorderLayout());

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(0, 2));
        panel.setBorder(new TitledBorder("Enter the values"));

        JLabel numberOfItemTypesLabel = new JLabel("Enter the number of item types:");
        JTextField numberOfItemTypesField = new JTextField();
        numberOfItemTypesField.setPreferredSize(new Dimension(Integer.MAX_VALUE, 10));

        JLabel seedLabel = new JLabel("Enter the seed:");
        JTextField seedField = new JTextField();
        seedField.setPreferredSize(new Dimension(Integer.MAX_VALUE, 10));

        JLabel lowerBoundLabel = new JLabel("Enter the lower bound:");
        JTextField lowerBoundField = new JTextField();
        lowerBoundField.setPreferredSize(new Dimension(Integer.MAX_VALUE, 10));

        JLabel upperBoundLabel = new JLabel("Enter the upper bound:");
        JTextField upperBoundField = new JTextField();
        upperBoundField.setPreferredSize(new Dimension(Integer.MAX_VALUE, 10));

        JLabel capacityLabel = new JLabel("Enter the capacity of the knapsack:");
        JTextField capacityField = new JTextField();
        capacityField.setPreferredSize(new Dimension(Integer.MAX_VALUE, 10));

        panel.add(numberOfItemTypesLabel);
        panel.add(numberOfItemTypesField);
        panel.add(seedLabel);
        panel.add(seedField);
        panel.add(lowerBoundLabel);
        panel.add(lowerBoundField);
        panel.add(upperBoundLabel);
        panel.add(upperBoundField);
        panel.add(capacityLabel);
        panel.add(capacityField);

        JTextArea generatedItemsArea = new JTextArea();
        generatedItemsArea.setEditable(false);
        JScrollPane generatedItemsScroll = new JScrollPane(generatedItemsArea);
        generatedItemsScroll.setBorder(new TitledBorder("Generated Items"));

        JTextArea knapsackItemsArea = new JTextArea();
        knapsackItemsArea.setEditable(false);
        JScrollPane knapsackItemsScroll = new JScrollPane(knapsackItemsArea);
        knapsackItemsScroll.setBorder(new TitledBorder("Items in Knapsack"));

        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton solveButton = new JButton("Solve");
        solveButton.setPreferredSize(new Dimension(80, 30));
        solveButton.addActionListener(e -> {
            try {
                int numberOfItemTypes = Integer.parseInt(numberOfItemTypesField.getText());
                int seed = Integer.parseInt(seedField.getText());
                int lowerBound = Integer.parseInt(lowerBoundField.getText());
                int upperBound = Integer.parseInt(upperBoundField.getText());
                int capacity = Integer.parseInt(capacityField.getText());

                if (lowerBound >= upperBound) {
                    JOptionPane.showMessageDialog(frame, "Lower bound must be less than upper bound.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                Problem problem = new Problem(numberOfItemTypes, seed, lowerBound, upperBound);
                Result result = problem.solve(capacity);

                generatedItemsArea.setText(problem.toString());
                knapsackItemsArea.setText(result.toString());
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(frame, "Please enter a valid number in all fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
            }
        });
        buttonPanel.add(solveButton);

        panel.add(generatedItemsScroll);
        panel.add(knapsackItemsScroll);

        frame.add(panel, BorderLayout.CENTER);
        frame.add(buttonPanel, BorderLayout.SOUTH);

        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }
}